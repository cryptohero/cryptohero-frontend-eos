/*--------------------------------------------------------------------------
* linq.js - LINQ for JavaScript
* ver 2.2.0.2 (Jan. 21th, 2011)
*
* created and maintained by neuecc <ils@neue.cc>
* licensed under Microsoft Public License(Ms-PL)
* http://neue.cc/
* http://linqjs.codeplex.com/
*--------------------------------------------------------------------------*/
const Enumerable = (function () {
  let m = 'Single:sequence contains more than one element.',
    e = true,
    b = null,
    a = false,
    c = function (a) { this.GetEnumerator = a; }; c.Choice = function () { const a = arguments[0] instanceof Array ? arguments[0] : arguments; return new c((() => new f(g.Blank, function () { return this.Yield(a[Math.floor(Math.random() * a.length)]); }, g.Blank))); }; c.Cycle = function () { const a = arguments[0] instanceof Array ? arguments[0] : arguments; return new c((() => { let b = 0; return new f(g.Blank, function () { if (b >= a.length)b = 0; return this.Yield(a[b++]); }, g.Blank); })); }; c.Empty = function () { return new c((() => new f(g.Blank, (() => a), g.Blank))); }; c.From = function (j) {
    if (j == b) return c.Empty(); if (j instanceof c) return j; if (typeof j === i.Number || typeof j === i.Boolean) return c.Repeat(j, 1); if (typeof j === i.String) return new c((() => { let b = 0; return new f(g.Blank, function () { return b < j.length ? this.Yield(j.charAt(b++)) : a; }, g.Blank); })); if (typeof j !== i.Function) {
      if (typeof j.length === i.Number) return new h(j); if (!(j instanceof Object) && d.IsIEnumerable(j)) {
        return new c((() => {
          let c = e,
            b; return new f((() => { b = new Enumerator(j); }), function () { if (c)c = a; else b.moveNext(); return b.atEnd() ? a : this.Yield(b.item()); }, g.Blank);
        }));
      }
    } return new c((() => {
      let b = [],
        c = 0; return new f((() => { for (const a in j)!(j[a] instanceof Function) && b.push({ Key: a, Value: j[a] }); }), function () { return c < b.length ? this.Yield(b[c++]) : a; }, g.Blank);
    }));
  }, c.Return = function (a) { return c.Repeat(a, 1); }; c.Matches = function (h, e, d) { if (d == b)d = ''; if (e instanceof RegExp) { d += e.ignoreCase ? 'i' : ''; d += e.multiline ? 'm' : ''; e = e.source; } if (d.indexOf('g') === -1)d += 'g'; return new c((() => { let b; return new f((() => { b = new RegExp(e, d); }), function () { const c = b.exec(h); return c ? this.Yield(c) : a; }, g.Blank); })); }; c.Range = function (e, d, a) { if (a == b)a = 1; return c.ToInfinity(e, a).Take(d); }; c.RangeDown = function (e, d, a) { if (a == b)a = 1; return c.ToNegativeInfinity(e, a).Take(d); }; c.RangeTo = function (d, e, a) { if (a == b)a = 1; return d < e ? c.ToInfinity(d, a).TakeWhile(a => a <= e) : c.ToNegativeInfinity(d, a).TakeWhile(a => a >= e); }; c.Repeat = function (d, a) { return a != b ? c.Repeat(d).Take(a) : new c((() => new f(g.Blank, function () { return this.Yield(d); }, g.Blank))); }; c.RepeatWithFinalize = function (a, e) { a = d.CreateLambda(a); e = d.CreateLambda(e); return new c((() => { let c; return new f((() => { c = a(); }), function () { return this.Yield(c); }, (() => { if (c != b) { e(c); c = b; } })); })); }; c.Generate = function (a, e) { if (e != b) return c.Generate(a).Take(e); a = d.CreateLambda(a); return new c((() => new f(g.Blank, function () { return this.Yield(a()); }, g.Blank))); }; c.ToInfinity = function (d, a) { if (d == b)d = 0; if (a == b)a = 1; return new c((() => { let b; return new f((() => { b = d - a; }), function () { return this.Yield(b += a); }, g.Blank); })); }; c.ToNegativeInfinity = function (d, a) { if (d == b)d = 0; if (a == b)a = 1; return new c((() => { let b; return new f((() => { b = d + a; }), function () { return this.Yield(b -= a); }, g.Blank); })); }; c.Unfold = function (h, b) {
    b = d.CreateLambda(b); return new c((() => {
      let d = e,
        c; return new f(g.Blank, function () { if (d) { d = a; c = h; return this.Yield(c); }c = b(c); return this.Yield(c); }, g.Blank);
    }));
  }; c.prototype = { CascadeBreadthFirst(g, b) {
    const h = this; g = d.CreateLambda(g); b = d.CreateLambda(b); return new c((() => {
      let i,
        k = 0,
        j = []; return new f((() => { i = h.GetEnumerator(); }), function () { while (e) { if (i.MoveNext()) { j.push(i.Current()); return this.Yield(b(i.Current(), k)); } const f = c.From(j).SelectMany(a => g(a)); if (!f.Any()) return a; k++; j = []; d.Dispose(i); i = f.GetEnumerator(); } }, (() => { d.Dispose(i); }));
    }));
  },
  CascadeDepthFirst(g, b) {
    const h = this; g = d.CreateLambda(g); b = d.CreateLambda(b); return new c((() => {
      let j = [],
        i; return new f((() => { i = h.GetEnumerator(); }), function () { while (e) { if (i.MoveNext()) { const f = b(i.Current(), j.length); j.push(i); i = c.From(g(i.Current())).GetEnumerator(); return this.Yield(f); } if (j.length <= 0) return a; d.Dispose(i); i = j.pop(); } }, (() => { try { d.Dispose(i); } finally { c.From(j).ForEach((a) => { a.Dispose(); }); } }));
    }));
  },
  Flatten() {
    const h = this; return new c((() => {
      let j,
        i = b; return new f((() => { j = h.GetEnumerator(); }), function () { while (e) { if (i != b) if (i.MoveNext()) return this.Yield(i.Current()); else i = b; if (j.MoveNext()) if (j.Current() instanceof Array) { d.Dispose(i); i = c.From(j.Current()).SelectMany(g.Identity).Flatten().GetEnumerator(); continue; } else return this.Yield(j.Current()); return a; } }, (() => { try { d.Dispose(j); } finally { d.Dispose(i); } }));
    }));
  },
  Pairwise(b) { const e = this; b = d.CreateLambda(b); return new c((() => { let c; return new f((() => { c = e.GetEnumerator(); c.MoveNext(); }), function () { const d = c.Current(); return c.MoveNext() ? this.Yield(b(d, c.Current())) : a; }, (() => { d.Dispose(c); })); })); },
  Scan(i, g, j) {
    if (j != b) return this.Scan(i, g).Select(j); let h; if (g == b) { g = d.CreateLambda(i); h = a; } else { g = d.CreateLambda(g); h = e; } const k = this; return new c((() => {
      let b,
        c,
        j = e; return new f((() => { b = k.GetEnumerator(); }), function () { if (j) { j = a; if (!h) { if (b.MoveNext()) return this.Yield(c = b.Current()); } else return this.Yield(c = i); } return b.MoveNext() ? this.Yield(c = g(c, b.Current())) : a; }, (() => { d.Dispose(b); }));
    }));
  },
  Select(b) {
    const e = this; b = d.CreateLambda(b); return new c((() => {
      let c,
        g = 0; return new f((() => { c = e.GetEnumerator(); }), function () { return c.MoveNext() ? this.Yield(b(c.Current(), g++)) : a; }, (() => { d.Dispose(c); }));
    }));
  },
  SelectMany(g, e) {
    const h = this; g = d.CreateLambda(g); if (e == b)e = function (b, a) { return a; }; e = d.CreateLambda(e); return new c((() => {
      let j,
        i,
        k = 0; return new f((() => { j = h.GetEnumerator(); }), function () { if (i === undefined) if (!j.MoveNext()) return a; do { if (i == b) { const f = g(j.Current(), k++); i = c.From(f).GetEnumerator(); } if (i.MoveNext()) return this.Yield(e(j.Current(), i.Current())); d.Dispose(i); i = b; } while (j.MoveNext());return a; }, (() => { try { d.Dispose(j); } finally { d.Dispose(i); } }));
    }));
  },
  Where(b) {
    b = d.CreateLambda(b); const e = this; return new c((() => {
      let c,
        g = 0; return new f((() => { c = e.GetEnumerator(); }), function () { while (c.MoveNext()) if (b(c.Current(), g++)) return this.Yield(c.Current()); return a; }, (() => { d.Dispose(c); }));
    }));
  },
  OfType(c) { let a; switch (c) { case Number:a = i.Number; break; case String:a = i.String; break; case Boolean:a = i.Boolean; break; case Function:a = i.Function; break; default:a = b; } return a === b ? this.Where(a => a instanceof c) : this.Where(b => typeof b === a); },
  Zip(e, b) {
    b = d.CreateLambda(b); const g = this; return new c((() => {
      let i,
        h,
        j = 0; return new f((() => { i = g.GetEnumerator(); h = c.From(e).GetEnumerator(); }), function () { return i.MoveNext() && h.MoveNext() ? this.Yield(b(i.Current(), h.Current(), j++)) : a; }, (() => { try { d.Dispose(i); } finally { d.Dispose(h); } }));
    }));
  },
  Join(m, i, h, k, j) {
    i = d.CreateLambda(i); h = d.CreateLambda(h); k = d.CreateLambda(k); j = d.CreateLambda(j); const l = this; return new c((() => {
      let n,
        q,
        o = b,
        p = 0; return new f((() => { n = l.GetEnumerator(); q = c.From(m).ToLookup(h, g.Identity, j); }), function () { while (e) { if (o != b) { let c = o[p++]; if (c !== undefined) return this.Yield(k(n.Current(), c)); c = b; p = 0; } if (n.MoveNext()) { const d = i(n.Current()); o = q.Get(d).ToArray(); } else return a; } }, (() => { d.Dispose(n); }));
    }));
  },
  GroupJoin(l, h, e, j, i) {
    h = d.CreateLambda(h); e = d.CreateLambda(e); j = d.CreateLambda(j); i = d.CreateLambda(i); const k = this; return new c((() => {
      let m = k.GetEnumerator(),
        n = b; return new f((() => { m = k.GetEnumerator(); n = c.From(l).ToLookup(e, g.Identity, i); }), function () { if (m.MoveNext()) { const b = n.Get(h(m.Current())); return this.Yield(j(m.Current(), b)); } return a; }, (() => { d.Dispose(m); }));
    }));
  },
  All(b) { b = d.CreateLambda(b); let c = e; this.ForEach((d) => { if (!b(d)) { c = a; return a; } }); return c; },
  Any(c) { c = d.CreateLambda(c); const b = this.GetEnumerator(); try { if (arguments.length == 0) return b.MoveNext(); while (b.MoveNext()) if (c(b.Current())) return e; return a; } finally { d.Dispose(b); } },
  Concat(e) {
    const g = this; return new c((() => {
      let i,
        h; return new f((() => { i = g.GetEnumerator(); }), function () { if (h == b) { if (i.MoveNext()) return this.Yield(i.Current()); h = c.From(e).GetEnumerator(); } return h.MoveNext() ? this.Yield(h.Current()) : a; }, (() => { try { d.Dispose(i); } finally { d.Dispose(h); } }));
    }));
  },
  Insert(h, b) {
    const g = this; return new c((() => {
      let j,
        i,
        l = 0,
        k = a; return new f((() => { j = g.GetEnumerator(); i = c.From(b).GetEnumerator(); }), function () { if (l == h && i.MoveNext()) { k = e; return this.Yield(i.Current()); } if (j.MoveNext()) { l++; return this.Yield(j.Current()); } return !k && i.MoveNext() ? this.Yield(i.Current()) : a; }, (() => { try { d.Dispose(j); } finally { d.Dispose(i); } }));
    }));
  },
  Alternate(a) { a = c.Return(a); return this.SelectMany(b => c.Return(b).Concat(a)).TakeExceptLast(); },
  Contains(f, b) { b = d.CreateLambda(b); const c = this.GetEnumerator(); try { while (c.MoveNext()) if (b(c.Current()) === f) return e; return a; } finally { d.Dispose(c); } },
  DefaultIfEmpty(b) {
    const g = this; return new c((() => {
      let c,
        h = e; return new f((() => { c = g.GetEnumerator(); }), function () { if (c.MoveNext()) { h = a; return this.Yield(c.Current()); } else if (h) { h = a; return this.Yield(b); } return a; }, (() => { d.Dispose(c); }));
    }));
  },
  Distinct(a) { return this.Except(c.Empty(), a); },
  Except(e, b) {
    b = d.CreateLambda(b); const g = this; return new c((() => {
      let h,
        i; return new f((() => { h = g.GetEnumerator(); i = new n(b); c.From(e).ForEach((a) => { i.Add(a); }); }), function () { while (h.MoveNext()) { const b = h.Current(); if (!i.Contains(b)) { i.Add(b); return this.Yield(b); } } return a; }, (() => { d.Dispose(h); }));
    }));
  },
  Intersect(e, b) {
    b = d.CreateLambda(b); const g = this; return new c((() => {
      let h,
        i,
        j; return new f((() => { h = g.GetEnumerator(); i = new n(b); c.From(e).ForEach((a) => { i.Add(a); }); j = new n(b); }), function () { while (h.MoveNext()) { const b = h.Current(); if (!j.Contains(b) && i.Contains(b)) { j.Add(b); return this.Yield(b); } } return a; }, (() => { d.Dispose(h); }));
    }));
  },
  SequenceEqual(h, f) { f = d.CreateLambda(f); const g = this.GetEnumerator(); try { const b = c.From(h).GetEnumerator(); try { while (g.MoveNext()) if (!b.MoveNext() || f(g.Current()) !== f(b.Current())) return a; return b.MoveNext() ? a : e; } finally { d.Dispose(b); } } finally { d.Dispose(g); } },
  Union(e, b) {
    b = d.CreateLambda(b); const g = this; return new c((() => {
      let j,
        h,
        i; return new f((() => { j = g.GetEnumerator(); i = new n(b); }), function () { let b; if (h === undefined) { while (j.MoveNext()) { b = j.Current(); if (!i.Contains(b)) { i.Add(b); return this.Yield(b); } }h = c.From(e).GetEnumerator(); } while (h.MoveNext()) { b = h.Current(); if (!i.Contains(b)) { i.Add(b); return this.Yield(b); } } return a; }, (() => { try { d.Dispose(j); } finally { d.Dispose(h); } }));
    }));
  },
  OrderBy(b) { return new j(this, b, a); },
  OrderByDescending(a) { return new j(this, a, e); },
  Reverse() {
    const b = this; return new c((() => {
      let c,
        d; return new f((() => { c = b.ToArray(); d = c.length; }), function () { return d > 0 ? this.Yield(c[--d]) : a; }, g.Blank);
    }));
  },
  Shuffle() { const b = this; return new c((() => { let c; return new f((() => { c = b.ToArray(); }), function () { if (c.length > 0) { const b = Math.floor(Math.random() * c.length); return this.Yield(c.splice(b, 1)[0]); } return a; }, g.Blank); })); },
  GroupBy(i, h, e, g) { const j = this; i = d.CreateLambda(i); h = d.CreateLambda(h); if (e != b)e = d.CreateLambda(e); g = d.CreateLambda(g); return new c((() => { let c; return new f((() => { c = j.ToLookup(i, h, g).ToEnumerable().GetEnumerator(); }), function () { while (c.MoveNext()) return e == b ? this.Yield(c.Current()) : this.Yield(e(c.Current().Key(), c.Current())); return a; }, (() => { d.Dispose(c); })); })); },
  PartitionBy(j, i, g, h) {
    const l = this; j = d.CreateLambda(j); i = d.CreateLambda(i); h = d.CreateLambda(h); let k; if (g == b) { k = a; g = function (b, a) { return new o(b, a); }; } else { k = e; g = d.CreateLambda(g); } return new c((() => {
      let b,
        n,
        o,
        m = []; return new f((() => { b = l.GetEnumerator(); if (b.MoveNext()) { n = j(b.Current()); o = h(n); m.push(i(b.Current())); } }), function () { let d; while ((d = b.MoveNext()) == e) if (o === h(j(b.Current())))m.push(i(b.Current())); else break; if (m.length > 0) { const f = k ? g(n, c.From(m)) : g(n, m); if (d) { n = j(b.Current()); o = h(n); m = [i(b.Current())]; } else m = []; return this.Yield(f); } return a; }, (() => { d.Dispose(b); }));
    }));
  },
  BufferWithCount(e) {
    const b = this; return new c((() => {
      let c; return new f((() => { c = b.GetEnumerator(); }), function () {
        let b = [],
          d = 0; while (c.MoveNext()) { b.push(c.Current()); if (++d >= e) return this.Yield(b); } return b.length > 0 ? this.Yield(b) : a;
      }, (() => { d.Dispose(c); }));
    }));
  },
  Aggregate(c, b, a) { return this.Scan(c, b, a).Last(); },
  Average(a) {
    a = d.CreateLambda(a); let c = 0,
      b = 0; this.ForEach((d) => { c += a(d); ++b; }); return c / b;
  },
  Count(a) { a = a == b ? g.True : d.CreateLambda(a); let c = 0; this.ForEach((d, b) => { if (a(d, b))++c; }); return c; },
  Max(a) { if (a == b)a = g.Identity; return this.Select(a).Aggregate((a, b) => (a > b ? a : b)); },
  Min(a) { if (a == b)a = g.Identity; return this.Select(a).Aggregate((a, b) => (a < b ? a : b)); },
  MaxBy(a) { a = d.CreateLambda(a); return this.Aggregate((b, c) => (a(b) > a(c) ? b : c)); },
  MinBy(a) { a = d.CreateLambda(a); return this.Aggregate((b, c) => (a(b) < a(c) ? b : c)); },
  Sum(a) { if (a == b)a = g.Identity; return this.Select(a).Aggregate(0, (a, b) => a + b); },
  ElementAt(d) {
    let c,
      b = a; this.ForEach((g, f) => { if (f == d) { c = g; b = e; return a; } }); if (!b) throw new Error('index is less than 0 or greater than or equal to the number of elements in source.'); return c;
  },
  ElementAtOrDefault(f, d) {
    let c,
      b = a; this.ForEach((g, d) => { if (d == f) { c = g; b = e; return a; } }); return !b ? d : c;
  },
  First(c) {
    if (c != b) return this.Where(c).First(); let f,
      d = a; this.ForEach((b) => { f = b; d = e; return a; }); if (!d) throw new Error('First:No element satisfies the condition.'); return f;
  },
  FirstOrDefault(c, d) {
    if (d != b) return this.Where(d).FirstOrDefault(c); let g,
      f = a; this.ForEach((b) => { g = b; f = e; return a; }); return !f ? c : g;
  },
  Last(c) {
    if (c != b) return this.Where(c).Last(); let f,
      d = a; this.ForEach((a) => { d = e; f = a; }); if (!d) throw new Error('Last:No element satisfies the condition.'); return f;
  },
  LastOrDefault(c, d) {
    if (d != b) return this.Where(d).LastOrDefault(c); let g,
      f = a; this.ForEach((a) => { f = e; g = a; }); return !f ? c : g;
  },
  Single(d) {
    if (d != b) return this.Where(d).Single(); let f,
      c = a; this.ForEach((a) => { if (!c) { c = e; f = a; } else throw new Error(m); }); if (!c) throw new Error('Single:No element satisfies the condition.'); return f;
  },
  SingleOrDefault(d, f) {
    if (f != b) return this.Where(f).SingleOrDefault(d); let g,
      c = a; this.ForEach((a) => { if (!c) { c = e; g = a; } else throw new Error(m); }); return !c ? d : g;
  },
  Skip(e) {
    const b = this; return new c((() => {
      let c,
        g = 0; return new f((() => { c = b.GetEnumerator(); while (g++ < e && c.MoveNext()); }), function () { return c.MoveNext() ? this.Yield(c.Current()) : a; }, (() => { d.Dispose(c); }));
    }));
  },
  SkipWhile(b) {
    b = d.CreateLambda(b); const g = this; return new c((() => {
      let c,
        i = 0,
        h = a; return new f((() => { c = g.GetEnumerator(); }), function () { while (!h) if (c.MoveNext()) { if (!b(c.Current(), i++)) { h = e; return this.Yield(c.Current()); } continue; } else return a; return c.MoveNext() ? this.Yield(c.Current()) : a; }, (() => { d.Dispose(c); }));
    }));
  },
  Take(e) {
    const b = this; return new c((() => {
      let c,
        g = 0; return new f((() => { c = b.GetEnumerator(); }), function () { return g++ < e && c.MoveNext() ? this.Yield(c.Current()) : a; }, (() => { d.Dispose(c); }));
    }));
  },
  TakeWhile(b) {
    b = d.CreateLambda(b); const e = this; return new c((() => {
      let c,
        g = 0; return new f((() => { c = e.GetEnumerator(); }), function () { return c.MoveNext() && b(c.Current(), g++) ? this.Yield(c.Current()) : a; }, (() => { d.Dispose(c); }));
    }));
  },
  TakeExceptLast(e) {
    if (e == b)e = 1; const g = this; return new c((() => {
      if (e <= 0) return g.GetEnumerator(); let b,
        c = []; return new f((() => { b = g.GetEnumerator(); }), function () { while (b.MoveNext()) { if (c.length == e) { c.push(b.Current()); return this.Yield(c.shift()); }c.push(b.Current()); } return a; }, (() => { d.Dispose(b); }));
    }));
  },
  TakeFromLast(e) {
    if (e <= 0 || e == b) return c.Empty(); const g = this; return new c((() => {
      let j,
        h,
        i = []; return new f((() => { j = g.GetEnumerator(); }), function () { while (j.MoveNext()) { i.length == e && i.shift(); i.push(j.Current()); } if (h == b)h = c.From(i).GetEnumerator(); return h.MoveNext() ? this.Yield(h.Current()) : a; }, (() => { d.Dispose(h); }));
    }));
  },
  IndexOf(c) { let a = b; this.ForEach((d, b) => { if (d === c) { a = b; return e; } }); return a !== b ? a : -1; },
  LastIndexOf(b) { let a = -1; this.ForEach((d, c) => { if (d === b)a = c; }); return a; },
  ToArray() { const a = []; this.ForEach((b) => { a.push(b); }); return a; },
  ToLookup(c, b, a) {
    c = d.CreateLambda(c); b = d.CreateLambda(b); a = d.CreateLambda(a); const e = new n(a); this.ForEach((g) => {
      let f = c(g),
        a = b(g),
        d = e.Get(f); if (d !== undefined)d.push(a); else e.Add(f, [a]);
    }); return new q(e);
  },
  ToObject(b, a) { b = d.CreateLambda(b); a = d.CreateLambda(a); const c = {}; this.ForEach((d) => { c[b(d)] = a(d); }); return c; },
  ToDictionary(c, b, a) { c = d.CreateLambda(c); b = d.CreateLambda(b); a = d.CreateLambda(a); const e = new n(a); this.ForEach((a) => { e.Add(c(a), b(a)); }); return e; },
  ToJSON(a, b) { return JSON.stringify(this.ToArray(), a, b); },
  ToString(a, c) { if (a == b)a = ''; if (c == b)c = g.Identity; return this.Select(c).ToArray().join(a); },
  Do(b) {
    const e = this; b = d.CreateLambda(b); return new c((() => {
      let c,
        g = 0; return new f((() => { c = e.GetEnumerator(); }), function () { if (c.MoveNext()) { b(c.Current(), g++); return this.Yield(c.Current()); } return a; }, (() => { d.Dispose(c); }));
    }));
  },
  ForEach(c) {
    c = d.CreateLambda(c); let e = 0,
      b = this.GetEnumerator(); try { while (b.MoveNext()) if (c(b.Current(), e++) === a) break; } finally { d.Dispose(b); }
  },
  Write(c, f) { if (c == b)c = ''; f = d.CreateLambda(f); let g = e; this.ForEach((b) => { if (g)g = a; else document.write(c); document.write(f(b)); }); },
  WriteLine(a) { a = d.CreateLambda(a); this.ForEach((b) => { document.write(a(b)); document.write('<br />'); }); },
  Force() { const a = this.GetEnumerator(); try { while (a.MoveNext()); } finally { d.Dispose(a); } },
  Let(b) { b = d.CreateLambda(b); const e = this; return new c((() => { let g; return new f((() => { g = c.From(b(e)).GetEnumerator(); }), function () { return g.MoveNext() ? this.Yield(g.Current()) : a; }, (() => { d.Dispose(g); })); })); },
  Share() {
    let e = this,
      d; return new c((() => new f((() => { if (d == b)d = e.GetEnumerator(); }), function () { return d.MoveNext() ? this.Yield(d.Current()) : a; }, g.Blank)));
  },
  MemoizeAll() {
    let h = this,
      e,
      d; return new c((() => { let c = -1; return new f((() => { if (d == b) { d = h.GetEnumerator(); e = []; } }), function () { c++; return e.length <= c ? d.MoveNext() ? this.Yield(e[c] = d.Current()) : a : this.Yield(e[c]); }, g.Blank); }));
  },
  Catch(b) { b = d.CreateLambda(b); const e = this; return new c((() => { let c; return new f((() => { c = e.GetEnumerator(); }), function () { try { return c.MoveNext() ? this.Yield(c.Current()) : a; } catch (d) { b(d); return a; } }, (() => { d.Dispose(c); })); })); },
  Finally(b) { b = d.CreateLambda(b); const e = this; return new c((() => { let c; return new f((() => { c = e.GetEnumerator(); }), function () { return c.MoveNext() ? this.Yield(c.Current()) : a; }, (() => { try { d.Dispose(c); } finally { b(); } })); })); },
  Trace(c, a) { if (c == b)c = 'Trace'; a = d.CreateLambda(a); return this.Do((b) => { console.log(c, ':', a(b)); }); } }; var g = { Identity(a) { return a; }, True() { return e; }, Blank() {} },
    i = { Boolean: typeof e, Number: typeof 0, String: typeof '', Object: typeof {}, Undefined: typeof undefined, Function: typeof function () {} },
    d = { CreateLambda(a) { if (a == b) return g.Identity; if (typeof a === i.String) if (a == '') return g.Identity; else if (a.indexOf('=>') == -1) return new Function('$,$$,$$$,$$$$', `return ${a}`); else { const c = a.match(/^[(\s]*([^()]*?)[)\s]*=>(.*)/); return new Function(c[1], `return ${c[2]}`); } return a; }, IsIEnumerable(b) { if (typeof Enumerator !== i.Undefined) try { new Enumerator(b); return e; } catch (c) {} return a; }, Compare(a, b) { return a === b ? 0 : a > b ? 1 : -1; }, Dispose(a) { a != b && a.Dispose(); } },
    k = { Before: 0, Running: 1, After: 2 },
    f = function (d, f, g) {
      let c = new p(),
        b = k.Before; this.Current = c.Current; this.MoveNext = function () { try { switch (b) { case k.Before:b = k.Running; d(); case k.Running:if (f.apply(c)) return e; this.Dispose(); return a; case k.After:return a; } } catch (g) { this.Dispose(); throw g; } }; this.Dispose = function () { if (b != k.Running) return; try { g(); } finally { b = k.After; } };
    },
    p = function () { let a = b; this.Current = function () { return a; }; this.Yield = function (b) { a = b; return e; }; },
    j = function (f, b, c, e) { const a = this; a.source = f; a.keySelector = d.CreateLambda(b); a.descending = c; a.parent = e; }; j.prototype = new c(); j.prototype.CreateOrderedEnumerable = function (a, b) { return new j(this.source, a, b, this); }; j.prototype.ThenBy = function (b) { return this.CreateOrderedEnumerable(b, a); }; j.prototype.ThenByDescending = function (a) { return this.CreateOrderedEnumerable(a, e); }; j.prototype.GetEnumerator = function () {
    let h = this,
      d,
      c,
      e = 0; return new f((() => { d = []; c = []; h.source.ForEach((b, a) => { d.push(b); c.push(a); }); const a = l.Create(h, b); a.GenerateKeys(d); c.sort((b, c) => a.Compare(b, c)); }), function () { return e < c.length ? this.Yield(d[c[e++]]) : a; }, g.Blank);
  }; var l = function (c, d, e) { const a = this; a.keySelector = c; a.descending = d; a.child = e; a.keys = b; }; l.Create = function (a, d) { const c = new l(a.keySelector, a.descending, d); return a.parent != b ? l.Create(a.parent, c) : c; }; l.prototype.GenerateKeys = function (d) { const a = this; for (var f = d.length, g = a.keySelector, e = new Array(f), c = 0; c < f; c++)e[c] = g(d[c]); a.keys = e; a.child != b && a.child.GenerateKeys(d); }; l.prototype.Compare = function (e, f) {
    let a = this,
      c = d.Compare(a.keys[e], a.keys[f]); if (c == 0) { if (a.child != b) return a.child.Compare(e, f); c = d.Compare(e, f); } return a.descending ? -c : c;
  }; var h = function (a) { this.source = a; }; h.prototype = new c(); h.prototype.Any = function (a) { return a == b ? this.source.length > 0 : c.prototype.Any.apply(this, arguments); }; h.prototype.Count = function (a) { return a == b ? this.source.length : c.prototype.Count.apply(this, arguments); }; h.prototype.ElementAt = function (a) { return a >= 0 && a < this.source.length ? this.source[a] : c.prototype.ElementAt.apply(this, arguments); }; h.prototype.ElementAtOrDefault = function (a, b) { return a >= 0 && a < this.source.length ? this.source[a] : b; }; h.prototype.First = function (a) { return a == b && this.source.length > 0 ? this.source[0] : c.prototype.First.apply(this, arguments); }; h.prototype.FirstOrDefault = function (a, d) { return d != b ? c.prototype.FirstOrDefault.apply(this, arguments) : this.source.length > 0 ? this.source[0] : a; }; h.prototype.Last = function (d) { const a = this; return d == b && a.source.length > 0 ? a.source[a.source.length - 1] : c.prototype.Last.apply(a, arguments); }; h.prototype.LastOrDefault = function (d, e) { const a = this; return e != b ? c.prototype.LastOrDefault.apply(a, arguments) : a.source.length > 0 ? a.source[a.source.length - 1] : d; }; h.prototype.Skip = function (d) { const b = this.source; return new c((() => { let c; return new f((() => { c = d < 0 ? 0 : d; }), function () { return c < b.length ? this.Yield(b[c++]) : a; }, g.Blank); })); }; h.prototype.TakeExceptLast = function (a) { if (a == b)a = 1; return this.Take(this.source.length - a); }; h.prototype.TakeFromLast = function (a) { return this.Skip(this.source.length - a); }; h.prototype.Reverse = function () { const b = this.source; return new c((() => { let c; return new f((() => { c = b.length; }), function () { return c > 0 ? this.Yield(b[--c]) : a; }, g.Blank); })); }; h.prototype.SequenceEqual = function (d, e) { return (d instanceof h || d instanceof Array) && e == b && c.From(d).Count() != this.Count() ? a : c.prototype.SequenceEqual.apply(this, arguments); }; h.prototype.ToString = function (a, d) { if (d != b || !(this.source instanceof Array)) return c.prototype.ToString.apply(this, arguments); if (a == b)a = ''; return this.source.join(a); }; h.prototype.GetEnumerator = function () {
    let b = this.source,
      c = 0; return new f(g.Blank, function () { return c < b.length ? this.Yield(b[c++]) : a; }, g.Blank);
  }; var n = (function () {
      let h = function (a, b) { return Object.prototype.hasOwnProperty.call(a, b); },
        d = function (a) { return a === b ? 'null' : a === undefined ? 'undefined' : typeof a.toString === i.Function ? a.toString() : Object.prototype.toString.call(a); },
        l = function (d, c) { const a = this; a.Key = d; a.Value = c; a.Prev = b; a.Next = b; },
        j = function () { this.First = b; this.Last = b; }; j.prototype = { AddLast(c) { const a = this; if (a.Last != b) { a.Last.Next = c; c.Prev = a.Last; a.Last = c; } else a.First = a.Last = c; }, Replace(c, a) { if (c.Prev != b) { c.Prev.Next = a; a.Prev = c.Prev; } else this.First = a; if (c.Next != b) { c.Next.Prev = a; a.Next = c.Next; } else this.Last = a; }, Remove(a) { if (a.Prev != b)a.Prev.Next = a.Next; else this.First = a.Next; if (a.Next != b)a.Next.Prev = a.Prev; else this.Last = a.Prev; } }; const k = function (c) { const a = this; a.count = 0; a.entryList = new j(); a.buckets = {}; a.compareSelector = c == b ? g.Identity : c; }; k.prototype = { Add(i, j) {
        let a = this,
          g = a.compareSelector(i),
          f = d(g),
          c = new l(i, j); if (h(a.buckets, f)) { for (var b = a.buckets[f], e = 0; e < b.length; e++) if (a.compareSelector(b[e].Key) === g) { a.entryList.Replace(b[e], c); b[e] = c; return; }b.push(c); } else a.buckets[f] = [c]; a.count++; a.entryList.AddLast(c);
      },
      Get(i) {
        let a = this,
          c = a.compareSelector(i),
          g = d(c); if (!h(a.buckets, g)) return undefined; for (let e = a.buckets[g], b = 0; b < e.length; b++) { const f = e[b]; if (a.compareSelector(f.Key) === c) return f.Value; } return undefined;
      },
      Set(k, m) {
        let b = this,
          g = b.compareSelector(k),
          j = d(g); if (h(b.buckets, j)) for (let f = b.buckets[j], c = 0; c < f.length; c++) if (b.compareSelector(f[c].Key) === g) { const i = new l(k, m); b.entryList.Replace(f[c], i); f[c] = i; return e; } return a;
      },
      Contains(j) {
        let b = this,
          f = b.compareSelector(j),
          i = d(f); if (!h(b.buckets, i)) return a; for (let g = b.buckets[i], c = 0; c < g.length; c++) if (b.compareSelector(g[c].Key) === f) return e; return a;
      },
      Clear() { this.count = 0; this.buckets = {}; this.entryList = new j(); },
      Remove(g) {
        let a = this,
          f = a.compareSelector(g),
          e = d(f); if (!h(a.buckets, e)) return; for (let b = a.buckets[e], c = 0; c < b.length; c++) if (a.compareSelector(b[c].Key) === f) { a.entryList.Remove(b[c]); b.splice(c, 1); if (b.length == 0) delete a.buckets[e]; a.count--; return; }
      },
      Count() { return this.count; },
      ToEnumerable() { const d = this; return new c((() => { let c; return new f((() => { c = d.entryList.First; }), function () { if (c != b) { const d = { Key: c.Key, Value: c.Value }; c = c.Next; return this.Yield(d); } return a; }, g.Blank); })); } }; return k;
    }()),
    q = function (a) { const b = this; b.Count = function () { return a.Count(); }; b.Get = function (b) { return c.From(a.Get(b)); }; b.Contains = function (b) { return a.Contains(b); }; b.ToEnumerable = function () { return a.ToEnumerable().Select(a => new o(a.Key, a.Value)); }; },
    o = function (b, a) { this.Key = function () { return b; }; h.call(this, a); }; o.prototype = new h(); return c;
}()); export { Enumerable };
